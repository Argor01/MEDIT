{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omen\\\\Desktop\\\\Medicines track system\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport MedicineList from './components/MedicineList';\nimport SimpleCalendar from './components/SimpleCalendar';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [medicines, setMedicines] = useState([]);\n  const [currentView, setCurrentView] = useState('medicines');\n  const [completedEvents, setCompletedEvents] = useState(new Set());\n\n  // Загружаем данные из localStorage при инициализации\n  useEffect(() => {\n    const savedMedicines = localStorage.getItem('medicines');\n    const savedCompletedEvents = localStorage.getItem('completedEvents');\n    if (savedMedicines) {\n      const parsedMedicines = JSON.parse(savedMedicines).map(medicine => ({\n        ...medicine,\n        startDate: new Date(medicine.startDate),\n        endDate: new Date(medicine.endDate)\n      }));\n      setMedicines(parsedMedicines);\n    }\n    if (savedCompletedEvents) {\n      setCompletedEvents(new Set(JSON.parse(savedCompletedEvents)));\n    }\n  }, []);\n\n  // Сохраняем данные в localStorage при изменении\n  useEffect(() => {\n    localStorage.setItem('medicines', JSON.stringify(medicines));\n  }, [medicines]);\n  useEffect(() => {\n    localStorage.setItem('completedEvents', JSON.stringify(Array.from(completedEvents)));\n  }, [completedEvents]);\n  const handleAddMedicine = medicine => {\n    setMedicines(prev => [...prev, medicine]);\n  };\n  const handleEditMedicine = updatedMedicine => {\n    setMedicines(prev => prev.map(medicine => medicine.id === updatedMedicine.id ? updatedMedicine : medicine));\n  };\n  const handleDeleteMedicine = id => {\n    setMedicines(prev => prev.filter(medicine => medicine.id !== id));\n    // Удаляем связанные события из календаря\n    setCompletedEvents(prev => {\n      const newSet = new Set(prev);\n      Array.from(newSet).forEach(eventId => {\n        if (eventId.startsWith(id)) {\n          newSet.delete(eventId);\n        }\n      });\n      return newSet;\n    });\n  };\n  const handleToggleMedicine = id => {\n    setMedicines(prev => prev.map(medicine => medicine.id === id ? {\n      ...medicine,\n      isActive: !medicine.isActive\n    } : medicine));\n  };\n  const handleEventToggle = eventId => {\n    setCompletedEvents(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(eventId)) {\n        newSet.delete(eventId);\n      } else {\n        newSet.add(eventId);\n      }\n      return newSet;\n    });\n  };\n  const getActiveMedicines = () => {\n    return medicines.filter(medicine => medicine.isActive);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"view-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `nav-btn ${currentView === 'medicines' ? 'active' : ''}`,\n          onClick: () => setCurrentView('medicines'),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nav-icon\",\n            children: \"\\uD83D\\uDC8A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u041B\\u0435\\u043A\\u0430\\u0440\\u0441\\u0442\\u0432\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `nav-btn ${currentView === 'calendar' ? 'active' : ''}`,\n          onClick: () => setCurrentView('calendar'),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nav-icon\",\n            children: \"\\uD83D\\uDCC5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u041A\\u0430\\u043B\\u0435\\u043D\\u0434\\u0430\\u0440\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"view-content\",\n        children: currentView === 'medicines' ? /*#__PURE__*/_jsxDEV(MedicineList, {\n          medicines: medicines,\n          onAddMedicine: handleAddMedicine,\n          onEditMedicine: handleEditMedicine,\n          onDeleteMedicine: handleDeleteMedicine,\n          onToggleMedicine: handleToggleMedicine\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(SimpleCalendar, {\n          medicines: getActiveMedicines(),\n          onEventToggle: handleEventToggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"JcQqXZUEGOI7V6xCuYpHnFr7Eno=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","MedicineList","SimpleCalendar","jsxDEV","_jsxDEV","App","_s","medicines","setMedicines","currentView","setCurrentView","completedEvents","setCompletedEvents","Set","savedMedicines","localStorage","getItem","savedCompletedEvents","parsedMedicines","JSON","parse","map","medicine","startDate","Date","endDate","setItem","stringify","Array","from","handleAddMedicine","prev","handleEditMedicine","updatedMedicine","id","handleDeleteMedicine","filter","newSet","forEach","eventId","startsWith","delete","handleToggleMedicine","isActive","handleEventToggle","has","add","getActiveMedicines","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onAddMedicine","onEditMedicine","onDeleteMedicine","onToggleMedicine","onEventToggle","_c","$RefreshReg$"],"sources":["C:/Users/omen/Desktop/Medicines track system/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from './components/Header';\r\nimport MedicineList from './components/MedicineList';\r\nimport SimpleCalendar from './components/SimpleCalendar';\r\nimport { Medicine, CalendarEvent } from './types';\r\nimport './App.css';\r\n\r\ntype View = 'medicines' | 'calendar';\r\n\r\nconst App: React.FC = () => {\r\n  const [medicines, setMedicines] = useState<Medicine[]>([]);\r\n  const [currentView, setCurrentView] = useState<View>('medicines');\r\n  const [completedEvents, setCompletedEvents] = useState<Set<string>>(new Set());\r\n\r\n  // Загружаем данные из localStorage при инициализации\r\n  useEffect(() => {\r\n    const savedMedicines = localStorage.getItem('medicines');\r\n    const savedCompletedEvents = localStorage.getItem('completedEvents');\r\n    \r\n    if (savedMedicines) {\r\n      const parsedMedicines = JSON.parse(savedMedicines).map((medicine: any) => ({\r\n        ...medicine,\r\n        startDate: new Date(medicine.startDate),\r\n        endDate: new Date(medicine.endDate)\r\n      }));\r\n      setMedicines(parsedMedicines);\r\n    }\r\n    \r\n    if (savedCompletedEvents) {\r\n      setCompletedEvents(new Set(JSON.parse(savedCompletedEvents)));\r\n    }\r\n  }, []);\r\n\r\n  // Сохраняем данные в localStorage при изменении\r\n  useEffect(() => {\r\n    localStorage.setItem('medicines', JSON.stringify(medicines));\r\n  }, [medicines]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('completedEvents', JSON.stringify(Array.from(completedEvents)));\r\n  }, [completedEvents]);\r\n\r\n  const handleAddMedicine = (medicine: Medicine) => {\r\n    setMedicines(prev => [...prev, medicine]);\r\n  };\r\n\r\n  const handleEditMedicine = (updatedMedicine: Medicine) => {\r\n    setMedicines(prev => \r\n      prev.map(medicine => \r\n        medicine.id === updatedMedicine.id ? updatedMedicine : medicine\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleDeleteMedicine = (id: string) => {\r\n    setMedicines(prev => prev.filter(medicine => medicine.id !== id));\r\n    // Удаляем связанные события из календаря\r\n    setCompletedEvents(prev => {\r\n      const newSet = new Set(prev);\r\n      Array.from(newSet).forEach(eventId => {\r\n        if (eventId.startsWith(id)) {\r\n          newSet.delete(eventId);\r\n        }\r\n      });\r\n      return newSet;\r\n    });\r\n  };\r\n\r\n  const handleToggleMedicine = (id: string) => {\r\n    setMedicines(prev => \r\n      prev.map(medicine => \r\n        medicine.id === id \r\n          ? { ...medicine, isActive: !medicine.isActive }\r\n          : medicine\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleEventToggle = (eventId: string) => {\r\n    setCompletedEvents(prev => {\r\n      const newSet = new Set(prev);\r\n      if (newSet.has(eventId)) {\r\n        newSet.delete(eventId);\r\n      } else {\r\n        newSet.add(eventId);\r\n      }\r\n      return newSet;\r\n    });\r\n  };\r\n\r\n  const getActiveMedicines = () => {\r\n    return medicines.filter(medicine => medicine.isActive);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Header />\r\n      \r\n      <main className=\"main-content\">\r\n        <div className=\"view-navigation\">\r\n          <button\r\n            className={`nav-btn ${currentView === 'medicines' ? 'active' : ''}`}\r\n            onClick={() => setCurrentView('medicines')}\r\n          >\r\n            <div className=\"nav-icon\">💊</div>\r\n            <span>Лекарства</span>\r\n          </button>\r\n          \r\n          <button\r\n            className={`nav-btn ${currentView === 'calendar' ? 'active' : ''}`}\r\n            onClick={() => setCurrentView('calendar')}\r\n          >\r\n            <div className=\"nav-icon\">📅</div>\r\n            <span>Календарь</span>\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"view-content\">\r\n          {currentView === 'medicines' ? (\r\n            <MedicineList\r\n              medicines={medicines}\r\n              onAddMedicine={handleAddMedicine}\r\n              onEditMedicine={handleEditMedicine}\r\n              onDeleteMedicine={handleDeleteMedicine}\r\n              onToggleMedicine={handleToggleMedicine}\r\n            />\r\n          ) : (\r\n            <SimpleCalendar\r\n              medicines={getActiveMedicines()}\r\n              onEventToggle={handleEventToggle}\r\n            />\r\n          )}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}