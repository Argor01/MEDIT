import React, { useState, useMemo } from 'react';
import { Medicine } from '../types';
import './MedicineHistory.css';

interface MedicineHistoryProps {
  medicines: Medicine[];
}

interface HistoryEntry {
  id: string;
  medicineName: string;
  dosage: string;
  startDate: Date;
  endDate: Date;
  frequency: string;
  timeOfDay: string[];
  notes?: string;
  isActive: boolean;
  duration: string;
}

const MedicineHistory: React.FC<MedicineHistoryProps> = ({ medicines }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<'all' | 'active' | 'inactive'>('all');
  const [sortBy, setSortBy] = useState<'name' | 'startDate' | 'endDate'>('startDate');

  const historyEntries: HistoryEntry[] = useMemo(() => {
    return medicines.map(medicine => {
      const startDate = new Date(medicine.startDate);
      const endDate = new Date(medicine.endDate);
      const durationMs = endDate.getTime() - startDate.getTime();
      const durationDays = Math.ceil(durationMs / (1000 * 60 * 60 * 24));
      
      let duration = '';
      if (durationDays === 1) {
        duration = '1 –¥–µ–Ω—å';
      } else if (durationDays < 7) {
        duration = `${durationDays} –¥–Ω–µ–π`;
      } else if (durationDays < 30) {
        const weeks = Math.ceil(durationDays / 7);
        duration = `${weeks} ${weeks === 1 ? '–Ω–µ–¥–µ–ª—è' : weeks < 5 ? '–Ω–µ–¥–µ–ª–∏' : '–Ω–µ–¥–µ–ª—å'}`;
      } else {
        const months = Math.ceil(durationDays / 30);
        duration = `${months} ${months === 1 ? '–º–µ—Å—è—Ü' : months < 5 ? '–º–µ—Å—è—Ü–∞' : '–º–µ—Å—è—Ü–µ–≤'}`;
      }

      return {
        id: medicine.id,
        medicineName: medicine.name,
        dosage: medicine.dosage,
        startDate,
        endDate,
        frequency: medicine.frequency,
        timeOfDay: medicine.timeOfDay,
        notes: medicine.notes,
        isActive: medicine.isActive,
        duration
      };
    });
  }, [medicines]);

  const filteredHistory = useMemo(() => {
    let filtered = historyEntries;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
    if (searchTerm) {
      filtered = filtered.filter(entry =>
        entry.medicineName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        entry.dosage.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (filterStatus !== 'all') {
      filtered = filtered.filter(entry =>
        filterStatus === 'active' ? entry.isActive : !entry.isActive
      );
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'name':
          return a.medicineName.localeCompare(b.medicineName);
        case 'startDate':
          return b.startDate.getTime() - a.startDate.getTime();
        case 'endDate':
          return b.endDate.getTime() - a.endDate.getTime();
        default:
          return 0;
      }
    });

    return filtered;
  }, [historyEntries, searchTerm, filterStatus, sortBy]);

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  const getStatusColor = (isActive: boolean) => {
    return isActive ? '#10b981' : '#6b7280';
  };

  const getStatusText = (isActive: boolean) => {
    return isActive ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
  };

  return (
    <div className="medicine-history">
      <div className="history-header">
        <div className="header-content">
          <h1>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤</h1>
          <p>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–ª–∏ –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ</p>
        </div>
        <div className="history-stats">
          <div className="stat-item">
            <div className="stat-number">{medicines.length}</div>
            <div className="stat-label">–í—Å–µ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤</div>
          </div>
          <div className="stat-item">
            <div className="stat-number">{medicines.filter(m => m.isActive).length}</div>
            <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
          </div>
          <div className="stat-item">
            <div className="stat-number">{medicines.filter(m => !m.isActive).length}</div>
            <div className="stat-label">–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö</div>
          </div>
        </div>
      </div>

      <div className="history-controls">
        <div className="search-container">
          <div className="search-icon">üîç</div>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –¥–æ–∑–∏—Ä–æ–≤–∫–µ..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
        </div>
        <div className="filter-container">
          <div className="filter-icon">üîß</div>
          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value as 'all' | 'active' | 'inactive')}
            className="filter-select"
          >
            <option value="all">–í—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞</option>
            <option value="active">–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ</option>
            <option value="inactive">–¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ</option>
          </select>
        </div>
        <div className="sort-container">
          <div className="sort-icon">üìä</div>
          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value as 'name' | 'startDate' | 'endDate')}
            className="sort-select"
          >
            <option value="startDate">–ü–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞</option>
            <option value="endDate">–ü–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è</option>
            <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
          </select>
        </div>
      </div>

      {filteredHistory.length === 0 ? (
        <div className="empty-history">
          <div className="empty-icon">üìã</div>
          <h3>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</h3>
          <p>
            {searchTerm || filterStatus !== 'all' 
              ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏'
              : '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é'
            }
          </p>
        </div>
      ) : (
        <div className="history-list">
          {filteredHistory.map((entry) => (
            <div key={entry.id} className="history-item">
              <div className="history-item-header">
                <div className="medicine-info">
                  <h3 className="medicine-name">{entry.medicineName}</h3>
                  <p className="medicine-dosage">{entry.dosage}</p>
                </div>
                <div className="status-badge" style={{ backgroundColor: getStatusColor(entry.isActive) }}>
                  {getStatusText(entry.isActive)}
                </div>
              </div>
              
              <div className="history-details">
                <div className="detail-row">
                  <div className="detail-item">
                    <span className="detail-label">üìÖ –ù–∞—á–∞–ª–æ –ø—Ä–∏—ë–º–∞:</span>
                    <span className="detail-value">{formatDate(entry.startDate)}</span>
                  </div>
                  <div className="detail-item">
                    <span className="detail-label">üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞:</span>
                    <span className="detail-value">{formatDate(entry.endDate)}</span>
                  </div>
                </div>
                
                <div className="detail-row">
                  <div className="detail-item">
                    <span className="detail-label">‚è∞ –ß–∞—Å—Ç–æ—Ç–∞:</span>
                    <span className="detail-value">{entry.frequency}</span>
                  </div>
                  <div className="detail-item">
                    <span className="detail-label">‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                    <span className="detail-value">{entry.duration}</span>
                  </div>
                </div>
                
                <div className="detail-row">
                  <div className="detail-item">
                    <span className="detail-label">üïê –í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞:</span>
                    <span className="detail-value">
                      {entry.timeOfDay.join(', ')}
                    </span>
                  </div>
                </div>
                
                {entry.notes && (
                  <div className="detail-row">
                    <div className="detail-item full-width">
                      <span className="detail-label">üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</span>
                      <span className="detail-value notes">{entry.notes}</span>
                    </div>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default MedicineHistory;
